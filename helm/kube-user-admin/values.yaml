# Default values for kube-user-admin.
# This is a YAML-formatted file.

# Global settings
global:
  imagePullSecrets: []
  storageClass: ""

# Image settings
image:
  registry: ghcr.io
  repository: renatoruis/kube-user-admin
  tag: "latest"
  pullPolicy: IfNotPresent

# ServiceAccount configuration
serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

# RBAC configuration
rbac:
  # Specifies whether RBAC resources should be created
  create: true
  # Rules for the ClusterRole
  rules:
    - apiGroups: [""]
      resources: ["serviceaccounts", "secrets", "namespaces"]
      verbs: ["get", "list", "create", "update", "patch", "delete"]
    - apiGroups: ["rbac.authorization.k8s.io"]
      resources: ["roles", "rolebindings", "clusterroles", "clusterrolebindings"]
      verbs: ["get", "list", "create", "update", "patch", "delete"]
    - apiGroups: [""]
      resources: ["nodes"]
      verbs: ["get", "list"]

# Backend configuration
backend:
  enabled: true
  name: backend
  replicaCount: 1
  
  image:
    repository: backend
    tag: "latest"
    pullPolicy: IfNotPresent
  
  service:
    type: ClusterIP
    port: 3000
    targetPort: 3000
    name: http
  
  resources:
    limits:
      cpu: 500m
      memory: 512Mi
    requests:
      cpu: 250m
      memory: 256Mi
  
  # Environment variables
  env:
    NODE_ENV: production
    DEFAULT_NAMESPACE: kube-user-admin
    ADMIN_PASSWORD: admin
    JWT_SECRET: kube-user-admin-secret-change-in-production
    PORT: "3000"
  
  # Security context
  securityContext:
    runAsNonRoot: true
    runAsUser: 1000
    fsGroup: 1000
  
  # Pod security context
  podSecurityContext:
    fsGroup: 1000
  
  # Probes
  livenessProbe:
    httpGet:
      path: /health
      port: http
    initialDelaySeconds: 30
    periodSeconds: 10
    timeoutSeconds: 5
    failureThreshold: 3
  
  readinessProbe:
    httpGet:
      path: /health
      port: http
    initialDelaySeconds: 5
    periodSeconds: 5
    timeoutSeconds: 3
    failureThreshold: 3

# Frontend configuration
frontend:
  enabled: true
  name: frontend
  replicaCount: 1
  
  image:
    repository: frontend
    tag: "latest"
    pullPolicy: IfNotPresent
  
  service:
    type: ClusterIP
    port: 80
    targetPort: 80
    name: http
  
  resources:
    limits:
      cpu: 200m
      memory: 256Mi
    requests:
      cpu: 100m
      memory: 128Mi
  
  # Security context
  securityContext:
    runAsNonRoot: true
    runAsUser: 1000
    fsGroup: 1000
  
  # Pod security context
  podSecurityContext:
    fsGroup: 1000
  
  # Probes
  livenessProbe:
    httpGet:
      path: /
      port: http
    initialDelaySeconds: 30
    periodSeconds: 10
    timeoutSeconds: 5
    failureThreshold: 3
  
  readinessProbe:
    httpGet:
      path: /
      port: http
    initialDelaySeconds: 5
    periodSeconds: 5
    timeoutSeconds: 3
    failureThreshold: 3

# Ingress configuration
ingress:
  enabled: false
  className: ""
  annotations: {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
    # cert-manager.io/cluster-issuer: letsencrypt-prod
  hosts:
    - host: kube-user-admin.local
      paths:
        - path: /
          pathType: Prefix
          service: frontend
        - path: /api
          pathType: Prefix
          service: backend
  tls: []
  #  - secretName: kube-user-admin-tls
  #    hosts:
  #      - kube-user-admin.local

# Pod Disruption Budget
podDisruptionBudget:
  enabled: false
  minAvailable: 1
  # maxUnavailable: 1

# Horizontal Pod Autoscaler
autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 100
  targetCPUUtilizationPercentage: 80
  # targetMemoryUtilizationPercentage: 80

# Node labels for pod assignment
nodeSelector: {}

# Tolerations for pod assignment
tolerations: []

# Affinity for pod assignment
affinity: {}

# Pod annotations
podAnnotations: {}

# Pod labels
podLabels: {}

# Security context constraints (OpenShift)
securityContextConstraints:
  enabled: false
  name: anyuid 